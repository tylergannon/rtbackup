#!/usr/bin/env ruby
# frozen_string_literal: true

lib_dir = File.join(File.dirname(__FILE__), '..', 'lib')
$LOAD_PATH.unshift lib_dir if File.directory?(lib_dir)

require 'server_backups'
require 'main'
require 'tmpdir'

def backup_thread(cancel_param)
    Thread.new do
        Time.zone = 'UTC'
        unless params[cancel_param].value == true
            Dir.mktmpdir do |tmp_dir|
                yield tmp_dir
            end
        end
    end
end

Main do
    option 'config', 'c' do
        argument :required
        description 'load configuration from YAML file'
        defaults '~/.backup_conf.yml'
    end

    option 'database', 'd' do
        argument :required
        description 'Which database to back up, defaults to all non-system databases.'
        defaults 'all'
    end

    option 'db_only', 'b' do
        argument :optional
        description 'Only work with database(s).'
    end

    option 'files_only', 'f' do
        argument :optional
        description 'Only work with files.'
    end

    argument 'backup_type' do
        cast :symbol
        validate { |command| ServerBackups::BackupBase::BACKUP_TYPES.include? command }
        description 'specifies the backup type to perform [incremental | daily | weekly | monthly]'
    end

    def run
        website_backup = backup_thread('db_only') do |tmp_dir|
            ServerBackups::WebsiteBackup.send(params['backup_type'].value,
                                              params['config'].value, tmp_dir).do_backup
        end
        database_backup = backup_thread('files_only') do |tmp_dir|
            ServerBackups::MysqlBackup.send(
                params['backup_type'].value,
                params['config'].value, tmp_dir, params['database'].value
            ).do_backup
        end
        [website_backup, database_backup].compact.each(&:join)
        exit_success!
    end
end
